JavaScript basics 
Here is a concise overview of JavaScript concepts from A to Z:

A: Array, Arrow Function, Async/Await

B: Boolean, Bind, BigInt

C: Callback, Closures, Classes

D: DOM, Destructuring, Default Parameters

E: Error Handling, Event Loop, Encapsulation

F: Fetch API, Functions, ForEach

G: Generators, Global Scope, Garbage Collection

H: Hoisting, Higher-Order Functions, HTTP Requests

I: IIFE (Immediately Invoked Function Expressions), Inheritance (OOP)

J: JSON (JavaScript Object Notation), JS Modules

L: Let Keyword, Logical Operators, Loops

M: Math Object, .map() Method

N: null, NaN (Not-a-Number)

O: Objects (JavaScript), Operators

P: Promises, Primitive Data Types

R: Recursion, Regular Expressions (RegExp)

S: Scope, .set() Object, Strict Mode

T: Ternary Operator, Type Coercion

U: Undefined, URLSearchParams

V: Variables, Versioning in ES

W: Web APIs, While Loop

X: XML Parsing

Y: Yield in Generators

Z: Zero-indexing in Arrays

These concepts span beginner to advanced levels.

please explain each concept with relevant examples and usage

Here is an explanation of JavaScript concepts from A to Z, with examples and usage:

### **A: Array**
An ordered collection of items.
```javascript
const fruits = ["Apple", "Banana", "Cherry"];
console.log(fruits[0]); // Output: Apple
```

### **B: Boolean**
Represents `true` or `false`.
```javascript
const isActive = true;
console.log(typeof isActive); // Output: boolean
```

### **C: Closures**
Functions that remember the scope in which they were created.
```javascript
function outer() {
  let count = 0;
  return function inner() {
    count++;
    return count;
  };
}
const counter = outer();
console.log(counter()); // Output: 1
console.log(counter()); // Output: 2
```

### **D: DOM (Document Object Model)**
Manipulates HTML elements.
```javascript
document.getElementById("title").textContent = "Hello, DOM!";
```

### **E: Event Loop**
Handles asynchronous operations in JavaScript.
```javascript
setTimeout(() => console.log("Async!"), 0);
console.log("Sync!"); // Output: Sync! Async!
```

### **F: Fetch API**
Used for making HTTP requests.
```javascript
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => console.log(data));
```

### **G: Generators**
Functions that can pause and resume execution.
```javascript
function* generator() {
  yield 1;
  yield 2;
}
const gen = generator();
console.log(gen.next().value); // Output: 1
```

### **H: Hoisting**
Variables and functions are moved to the top of their scope.
```javascript
console.log(a); // Output: undefined
var a = 5;
```

### **I: IIFE (Immediately Invoked Function Expression)**
Executes immediately after creation.
```javascript
(function() {
  console.log("IIFE executed!");
})();
```

### **J: JSON (JavaScript Object Notation)**
Data format for exchanging information.
```javascript
const jsonData = '{"name": "John", "age": 30}';
const user = JSON.parse(jsonData);
console.log(user.name); // Output: John
```

### **L: Let Keyword**
Declares block-scoped variables.
```javascript
let x = 10;
if (true) {
  let x = 20;
}
console.log(x); // Output: 10
```

### **M: Map Method**
Applies a function to each array element.
```javascript
const numbers = [1, 2, 3];
const squares = numbers.map(num => num * num);
console.log(squares); // Output: [1, 4, 9]
```

### **N: Null**
Represents the absence of a value.
```javascript
let value = null;
console.log(value); // Output: null
```

### **O: Objects**
Key-value pairs for storing data.
```javascript
const person = { name: "Alice", age: 25 };
console.log(person.name); // Output: Alice
```

### **P: Promises**
Handle asynchronous operations.
```javascript
const promise = new Promise((resolve, reject) => {
  setTimeout(() => resolve("Done!"), 1000);
});
promise.then(result => console.log(result)); // Output after 1s: Done!
```

### **R: Recursion**
A function calling itself.
```javascript
function factorial(n) {
  return n === 0 ? 1 : n * factorial(n - 1);
}
console.log(factorial(5)); // Output: 120
```

### **S: Scope**
Defines variable accessibility.
```javascript
let globalVar = "Global";
function testScope() {
  let localVar = "Local";
}
console.log(globalVar); // Accessible globally
// console.log(localVar); // Error!
```

### **T: Ternary Operator**
Shorthand for conditional statements.
```javascript
const age = 18;
const status = age >= 18 ? "Adult" : "Minor";
console.log(status); // Output: Adult
```

### **U: Undefined**
A variable declared but not assigned a value.
```javascript
let x;
console.log(x); // Output: undefined
```

### **V: Variables**
Declared using `var`, `let`, or `const`.
```javascript
const name = "John";
let age = 30;
var isActive = true;
```

### **W: While Loop**
Executes as long as a condition is true.
```javascript
let i = 0;
while (i < 3) {
  console.log(i);
  i++;
}
```

### **X: XML Parsing**
Parsing XML with JavaScript (less common today).
```javascript
const parser = new DOMParser();
const xmlDoc = parser.parseFromString("<root><child>Value</child></root>", "text/xml");
console.log(xmlDoc.getElementsByTagName("child")[0].textContent); // Output: Value
```

### **Y: Yield**
Pauses and resumes generator functions.
```javascript
function* numbers() {
  yield "One";
}
console.log(numbers().next().value); // Output: One
```

### **Z: Zero-Indexing in Arrays**
Arrays start at index `0`.
```javascript
const arr = ["a", "b", "c"];
console.log(arr[0]); // Output: a
```




